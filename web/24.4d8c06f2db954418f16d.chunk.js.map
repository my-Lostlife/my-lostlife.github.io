{"version":3,"sources":["webpack:///./src/helpers/bytes/bufferConcats.ts","webpack:///./src/lib/polyfill.ts"],"names":["bufferConcats","args","length","reduce","acc","v","byteLength","tmp","Uint8Array","lastLength","forEach","b","set","ArrayBuffer","prototype","concat","this","toJSON","Promise","finally","fn","onFinally","callback","resolve","then","result","reason","reject"],"mappings":"uFAAe,SAASA,KAAiBC,GACvC,MAAMC,EAASD,EAAKE,OAAO,CAACC,EAAKC,IAAMD,GAAQC,EAAkBC,YAAeD,EAAiBH,QAAS,GAEpGK,EAAM,IAAIC,WAAWN,GAE3B,IAAIO,EAAa,EAMjB,OALAR,EAAKS,QAAQC,IACXJ,EAAIK,IAAID,aAAaE,YAAc,IAAIL,WAAWG,GAAKA,EAAGF,GAC1DA,GAAeE,EAAkBL,YAAeK,EAAiBT,SAG5DK,EAXT,mC,gCCAA,oBAQAC,WAAWM,UAAUC,OAAS,YAAYd,GACxC,OAAO,YAAce,QAASf,IAOhCO,WAAWM,UAAUG,OAAS,WAC5B,MAAO,IAAID,OAIbE,QAAQJ,UAAUK,QAAUD,QAAQJ,UAAUK,SAAW,SAA8BC,GACrF,MAAMC,EAAaC,GAAwBJ,QAAQK,QAAQH,KAAMI,KAAKF,GACtE,OAAON,KAAKQ,KACVC,GAAUJ,EAAU,IAAMI,GAC1BC,GAAUL,EAAU,IAAMH,QAAQS,OAAOD","file":"24.4d8c06f2db954418f16d.chunk.js","sourcesContent":["export default function bufferConcats(...args: (ArrayBuffer | Uint8Array | number[])[]) {\n  const length = args.reduce((acc, v) => acc + ((v as ArrayBuffer).byteLength || (v as Uint8Array).length), 0);\n\n  const tmp = new Uint8Array(length);\n  \n  let lastLength = 0;\n  args.forEach(b => {\n    tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);\n    lastLength += (b as ArrayBuffer).byteLength || (b as Uint8Array).length;\n  });\n\n  return tmp/* .buffer */;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport bufferConcats from \"../helpers/bytes/bufferConcats\";\n\nUint8Array.prototype.concat = function(...args: Array<Uint8Array | ArrayBuffer | number[]>) {\n  return bufferConcats(this, ...args);\n};\n\n/* Uint8Array.prototype.toString = function() {\n  return String.fromCharCode.apply(null, [...this]);\n}; */\n\nUint8Array.prototype.toJSON = function() {\n  return [...this];\n  //return {type: 'bytes', value: [...this]};\n};\n\nPromise.prototype.finally = Promise.prototype.finally || function<T>(this: Promise<T>, fn: () => any) {\n  const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n  return this.then(\n    result => onFinally(() => result),\n    reason => onFinally(() => Promise.reject(reason))\n  );\n};\n\ndeclare global {\n  interface Uint8Array {\n    concat: (...args: Array<Uint8Array | ArrayBuffer | number[]>) => Uint8Array,\n    //toString: () => string,\n    toJSON: () => number[],\n    //toJSON: () => {type: 'bytes', value: number[]},\n  }\n  \n  interface Promise<T> {\n    finally: (onfinally?: () => void) => Promise<T>;\n  }\n}\n"],"sourceRoot":""}